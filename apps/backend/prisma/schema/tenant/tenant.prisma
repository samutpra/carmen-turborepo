generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/@prisma-carmen-client-tenant"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "multiSchema", "postgresqlExtensions", "relationJoins", "typedSql"]
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD/tenant.md"
  title    = "Carmen Inventory Tenant Database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TENANT")
}

model address_type_table {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique @db.Uuid
  description          String?
  isActive             Boolean?               @default(true)
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  createById           String?                @db.Uuid
  updateAt             DateTime?              @default(now()) @db.Timestamp(6)
  updateById           String?                @db.Uuid
  vendor_address_table vendor_address_table[]

  @@index([name], map: "addresstype_name_u")
}

model contact_type_table {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique @db.Uuid
  description          String?
  isActive             Boolean?               @default(true)
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  createById           String?                @db.Uuid
  updateAt             DateTime?              @default(now()) @db.Timestamp(6)
  updateById           String?                @db.Uuid
  vendor_contact_table vendor_contact_table[]

  @@index([name], map: "contacttype_name_u")
}

model currency_table {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                String                @unique @db.VarChar(3)
  name                String                @db.VarChar(100)
  symbol              String?               @db.VarChar(5)
  description         String?               @default("")
  isActive            Boolean?              @default(true)
  rate                Float?                @default(1)
  createdAt           DateTime?             @default(now()) @db.Timestamp(6)
  createById          String?               @db.Uuid
  updateAt            DateTime?             @default(now()) @db.Timestamp(6)
  updateById          String?               @db.Uuid
  exchange_rate_table exchange_rate_table[]

  @@index([code], map: "currency_code_u")
}

model delivery_point_table {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @unique @db.VarChar
  isActive       Boolean?         @default(true)
  createdAt      DateTime?        @default(now()) @db.Timestamp(6)
  createById     String?          @db.Uuid
  updateAt       DateTime?        @default(now()) @db.Timestamp(6)
  updateById     String?          @db.Uuid
  location_table location_table[]

  @@index([name], map: "deliverypoint_name_u")
}

model department_table {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar
  description String?
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid

  @@index([name], map: "department_name_u")
}

model exchange_rate_table {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateAt         DateTime?       @default(now()) @db.Timestamp(6)
  currencyId     String?         @db.Uuid
  rate           Float?          @default(1)
  createdAt      DateTime?       @default(now()) @db.Timestamp(6)
  createById     String?         @db.Uuid
  updateAt       DateTime?       @default(now()) @db.Timestamp(6)
  updateById     String?         @db.Uuid
  currency_table currency_table? @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dateAt, currencyId], map: "exchangerate_dateat_currencyid_u")
}

model global_activity_table {
  id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action      enum_activity_action?
  entityType  String?               @db.VarChar(100)
  entityId    String?               @db.Uuid
  actorId     String?               @db.Uuid
  metadata    Json?                 @db.Json
  oldData     Json?                 @db.Json
  newData     Json?                 @db.Json
  ipAddress   String?
  userAgent   String?
  description String?
  createdAt   DateTime?             @default(now()) @db.Timestamp(6)
  createById  String?               @db.Uuid

  @@index([entityType, entityId], map: "global_activity_entitytype_entityid_idx")
  @@index([action])
  @@index([actorId])
  @@index([createdAt])
}

model good_receive_note_0_table {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id                        String                        @db.Uuid
  name                          String?                       @db.VarChar
  inventory_transaction_0_table inventory_transaction_0_table @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  good_receive_note_1_table     good_receive_note_1_table[]
}

model good_receive_note_1_table {
  id                        String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  GRN0Id                    String                    @db.Uuid
  name                      String?                   @db.VarChar
  good_receive_note_0_table good_receive_note_0_table @relation(fields: [GRN0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model inventory_transaction_0_table {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String                          @unique @db.VarChar
  invDocType                    enum_inventory_doc_type?
  good_receive_note_0_table     good_receive_note_0_table[]
  inventory_transaction_1_table inventory_transaction_1_table[]
  stock_in_0_table              stock_in_0_table[]
  stock_out_0_table             stock_out_0_table[]
  store_requisition_0_table     store_requisition_0_table[]
}

model inventory_transaction_1_table {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id                        String                          @db.Uuid
  fromLot                       String?                         @db.Uuid
  currentLotName                String?                         @db.VarChar
  qty                           Decimal?                        @db.Decimal
  cost                          Decimal?                        @db.Decimal(15, 5)
  inventory_transaction_0_table inventory_transaction_0_table   @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory_transaction_2_table inventory_transaction_2_table[]
}

model inventory_transaction_2_table {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv1Id                        String                        @db.Uuid
  lotName                       String?                       @db.VarChar
  lotIndex                      Int                           @default(1)
  qty                           Decimal?                      @db.Decimal
  cost                          Decimal?                      @db.Decimal(15, 5)
  inventory_transaction_1_table inventory_transaction_1_table @relation(fields: [inv1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([lotName, lotIndex], map: "inv2_lotname_lotindex_u")
}

model location_table {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @unique @db.VarChar
  locationType         enum_location_type
  description          String?
  isActive             Boolean?              @default(true)
  deliveryPointId      String?               @db.Uuid
  createdAt            DateTime?             @default(now()) @db.Timestamp(6)
  createById           String?               @db.Uuid
  updateAt             DateTime?             @default(now()) @db.Timestamp(6)
  updateById           String?               @db.Uuid
  delivery_point_table delivery_point_table? @relation(fields: [deliveryPointId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "location_name_u")
}

model menu_table {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar(5)
  description String?
  isActive    Boolean?  @default(true)
  isVisible   Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid

  @@index([name], map: "menu_name_u")
}

model product_category_table {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String                       @unique @db.VarChar
  description                String?
  isActive                   Boolean?                     @default(true)
  createdAt                  DateTime?                    @default(now()) @db.Timestamp(6)
  createById                 String?                      @db.Uuid
  updateAt                   DateTime?                    @default(now()) @db.Timestamp(6)
  updateById                 String?                      @db.Uuid
  product_sub_category_table product_sub_category_table[]

  @@index([name], map: "productcategory_name_u")
}

model product_info_table {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId     String        @unique @db.Uuid
  price         Float?
  info          Json?         @db.Json
  createdAt     DateTime?     @default(now()) @db.Timestamp(6)
  createById    String?       @db.Uuid
  updateAt      DateTime?     @default(now()) @db.Timestamp(6)
  updateById    String?       @db.Uuid
  product_table product_table @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([productId], map: "productinfo_productid_u")
}

model product_item_group_table {
  id                         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String                      @unique @db.VarChar
  description                String?
  isActive                   Boolean?                    @default(true)
  productSubCategoryId       String?                     @db.Uuid
  createdAt                  DateTime?                   @default(now()) @db.Timestamp(6)
  createById                 String?                     @db.Uuid
  updateAt                   DateTime?                   @default(now()) @db.Timestamp(6)
  updateById                 String?                     @db.Uuid
  product_sub_category_table product_sub_category_table? @relation(fields: [productSubCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "productitemgroup_name_u")
}

model product_sub_category_table {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique @db.VarChar
  description              String?
  isActive                 Boolean?                   @default(true)
  productCategoryId        String?                    @db.Uuid
  createdAt                DateTime?                  @default(now()) @db.Timestamp(6)
  createById               String?                    @db.Uuid
  updateAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  updateById               String?                    @db.Uuid
  product_item_group_table product_item_group_table[]
  product_category_table   product_category_table?    @relation(fields: [productCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "productsubcategory_name_u")
}

model product_table {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                  String                  @unique @db.VarChar
  name                  String                  @unique @db.VarChar
  description           String?
  primaryUnit           String                  @db.Uuid
  isActive              Boolean?                @default(true)
  createdAt             DateTime?               @default(now()) @db.Timestamp(6)
  createById            String?                 @db.Uuid
  updateAt              DateTime?               @default(now()) @db.Timestamp(6)
  updateById            String?                 @db.Uuid
  product_info_table    product_info_table?
  unit_table            unit_table              @relation(fields: [primaryUnit], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_vendor_table  product_vendor_table[]
  unit_conversion_table unit_conversion_table[]

  @@index([code], map: "product_code_u")
  @@index([name], map: "product_name_u")
}

model product_vendor_table {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId      String?        @db.Uuid
  productId     String?        @db.Uuid
  description   String?
  isActive      Boolean?       @default(true)
  createdAt     DateTime?      @default(now()) @db.Timestamp(6)
  createById    String?        @db.Uuid
  updateAt      DateTime?      @default(now()) @db.Timestamp(6)
  updateById    String?        @db.Uuid
  product_table product_table? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendor_table  vendor_table?  @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, productId], map: "productvendor_vendorid_productid_u")
}

model purchase_order_0_table {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @unique @db.VarChar
  description            String?
  isActive               Boolean?                 @default(true)
  createdAt              DateTime?                @default(now()) @db.Timestamp(6)
  createById             String?                  @db.Uuid
  updateAt               DateTime?                @default(now()) @db.Timestamp(6)
  updateById             String?                  @db.Uuid
  purchase_order_1_table purchase_order_1_table[]

  @@index([name], map: "PO_name_u")
}

model purchase_order_1_table {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                 @unique @db.VarChar
  description            String?
  isActive               Boolean?                @default(true)
  PO0Id                  String?                 @db.Uuid
  createdAt              DateTime?               @default(now()) @db.Timestamp(6)
  createById             String?                 @db.Uuid
  updateAt               DateTime?               @default(now()) @db.Timestamp(6)
  updateById             String?                 @db.Uuid
  purchase_order_0_table purchase_order_0_table? @relation(fields: [PO0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "PO1_name_u")
}

model purchase_request_0_table {
  id                          String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refName                     String                       @unique @db.VarChar
  prDate                      DateTime?                    @db.Date
  prTypeId                    String?                      @db.Uuid
  requestorId                 String?                      @db.Uuid
  departmentId                String?                      @db.Uuid
  isActive                    Boolean?                     @default(true)
  createdAt                   DateTime?                    @default(now()) @db.Timestamp(6)
  createById                  String?                      @db.Uuid
  updateAt                    DateTime?                    @default(now()) @db.Timestamp(6)
  updateById                  String?                      @db.Uuid
  purchase_request_type_table purchase_request_type_table? @relation(fields: [prTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchase_request_1_table    purchase_request_1_table[]

  @@index([refName], map: "PR0_refname_u")
}

model purchase_request_1_table {
  id                                String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  PR0Id                             String?                             @db.Uuid
  locationId                        String?                             @db.Uuid
  productId                         String?                             @db.Uuid
  unitId                            String?                             @db.Uuid
  description                       String?
  requestQty                        Float?
  approveQty                        Float?
  currencyId                        String?                             @db.Uuid
  currencyRate                      Float?
  price                             Decimal?                            @db.Decimal(15, 5)
  totalPrice                        Decimal?                            @db.Decimal(15, 5)
  createdAt                         DateTime?                           @default(now()) @db.Timestamp(6)
  createById                        String?                             @db.Uuid
  updateAt                          DateTime?                           @default(now()) @db.Timestamp(6)
  updateById                        String?                             @db.Uuid
  purchase_request_0_table          purchase_request_0_table?           @relation(fields: [PR0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchase_request_1_workflow_table purchase_request_1_workflow_table[]
}

model purchase_request_1_workflow_table {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  PR1Id                    String?                   @db.Uuid
  createdAt                DateTime?                 @default(now()) @db.Timestamp(6)
  createById               String?                   @db.Uuid
  purchase_request_1_table purchase_request_1_table? @relation(fields: [PR1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model purchase_request_type_table {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique @db.VarChar
  description              String?
  isActive                 Boolean?                   @default(true)
  createdAt                DateTime?                  @default(now()) @db.Timestamp(6)
  createById               String?                    @db.Uuid
  updateAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  updateById               String?                    @db.Uuid
  purchase_request_0_table purchase_request_0_table[]

  @@index([name], map: "PRtype_name_u")
}

model stock_in_0_table {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id                        String                        @db.Uuid
  name                          String?                       @db.VarChar
  inventory_transaction_0_table inventory_transaction_0_table @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stock_in_1_table              stock_in_1_table[]
}

model stock_in_1_table {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SI0Id            String           @db.Uuid
  name             String?          @db.VarChar
  stock_in_0_table stock_in_0_table @relation(fields: [SI0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stock_out_0_table {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id                        String                        @db.Uuid
  name                          String?                       @db.VarChar
  inventory_transaction_0_table inventory_transaction_0_table @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stock_out_1_table             stock_out_1_table[]
}

model stock_out_1_table {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SO0Id             String            @db.Uuid
  name              String?           @db.VarChar
  stock_out_0_table stock_out_0_table @relation(fields: [SO0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model store_requisition_0_table {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id                        String                        @db.Uuid
  name                          String?                       @db.VarChar
  inventory_transaction_0_table inventory_transaction_0_table @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  store_requisition_1_table     store_requisition_1_table[]
}

model store_requisition_1_table {
  id                        String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SR0Id                     String                    @db.Uuid
  name                      String?                   @db.VarChar
  store_requisition_0_table store_requisition_0_table @relation(fields: [SR0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_conversion_table {
  id                                                      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId                                               String?        @db.Uuid
  unitType                                                enum_unit_type
  fromUnitId                                              String?        @db.Uuid
  toUnitId                                                String?        @db.Uuid
  rate                                                    Float?         @default(1)
  description                                             String?
  isActive                                                Boolean?       @default(true)
  createdAt                                               DateTime?      @default(now()) @db.Timestamp(6)
  createById                                              String?        @db.Uuid
  updateAt                                                DateTime?      @default(now()) @db.Timestamp(6)
  updateById                                              String?        @db.Uuid
  unit_table_unit_conversion_table_fromUnitIdTounit_table unit_table?    @relation("unit_conversion_table_fromUnitIdTounit_table", fields: [fromUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_table                                           product_table? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit_table_unit_conversion_table_toUnitIdTounit_table   unit_table?    @relation("unit_conversion_table_toUnitIdTounit_table", fields: [toUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([productId, unitType], map: "unitconversion_productid_unittype_u")
}

model unit_table {
  id                                                                 String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                               String                  @unique @db.VarChar
  description                                                        String?
  isActive                                                           Boolean?                @default(true)
  createdAt                                                          DateTime?               @default(now()) @db.Timestamp(6)
  createById                                                         String?                 @db.Uuid
  updateAt                                                           DateTime?               @default(now()) @db.Timestamp(6)
  updateById                                                         String?                 @db.Uuid
  product_table                                                      product_table[]
  unit_conversion_table_unit_conversion_table_fromUnitIdTounit_table unit_conversion_table[] @relation("unit_conversion_table_fromUnitIdTounit_table")
  unit_conversion_table_unit_conversion_table_toUnitIdTounit_table   unit_conversion_table[] @relation("unit_conversion_table_toUnitIdTounit_table")

  @@index([name], map: "unit_name_u")
}

model vendor_address_table {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId           String?            @db.Uuid
  addressTypeId      String             @db.Uuid
  address            Json?              @db.Json
  isActive           Boolean?           @default(true)
  createdAt          DateTime?          @default(now()) @db.Timestamp(6)
  createById         String?            @db.Uuid
  updateAt           DateTime?          @default(now()) @db.Timestamp(6)
  updateById         String?            @db.Uuid
  address_type_table address_type_table @relation(fields: [addressTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendor_table       vendor_table?      @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, addressTypeId], map: "vendorcontact_vendorid_addresstypeid_u")
}

model vendor_contact_table {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId           String?            @db.Uuid
  contactTypeId      String             @db.Uuid
  description        String?
  isActive           Boolean?           @default(true)
  createdAt          DateTime?          @default(now()) @db.Timestamp(6)
  createById         String?            @db.Uuid
  updateAt           DateTime?          @default(now()) @db.Timestamp(6)
  updateById         String?            @db.Uuid
  contact_type_table contact_type_table @relation(fields: [contactTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendor_table       vendor_table?      @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, contactTypeId], map: "vendorcontact_vendorid_contacttypeid_u")
}

model vendor_table {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique @db.VarChar
  description          String?
  isActive             Boolean?               @default(true)
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  createById           String?                @db.Uuid
  updateAt             DateTime?              @default(now()) @db.Timestamp(6)
  updateById           String?                @db.Uuid
  product_vendor_table product_vendor_table[]
  vendor_address_table vendor_address_table[]
  vendor_contact_table vendor_contact_table[]

  @@index([name], map: "vendor_name_u")
}

enum enum_activity_action {
  read
  create
  update
  delete
  login
  other
}

enum enum_inventory_doc_type {
  GRN
  CN
  SR
  ISSUE
  ADJ
  SI
  SO
}

enum enum_location_type {
  Inventory
  Direct
  Consignment
}

enum enum_purchase_order_status {
  Open
  Voided
  Closed
  Draft
  Sent
  Partial
  FullyReceived
  Cancelled
  Deleted
}

enum enum_purchase_request_doc_status {
  Draft
  WIP
  Complete
}

enum enum_purchase_request_workflow_status {
  Draft
  Pending
  Review
  Accept
}

enum enum_unit_type {
  OrderUnit
  InventoryUnit
  RecipeUnit
}
