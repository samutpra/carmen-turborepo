generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/@prisma-carmen-client-tenant"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "multiSchema", "postgresqlExtensions"]
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD/tenant.md"
  title    = "Carmen Inventory Tenant Database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TENANT")
}

model AddressType {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique @db.Uuid
  description   String?
  isActive      Boolean?        @default(true)
  createdAt     DateTime?       @default(now()) @db.Timestamp(6)
  createById    String?         @db.Uuid
  updateAt      DateTime?       @default(now()) @db.Timestamp(6)
  updateById    String?         @db.Uuid
  VendorAddress VendorAddress[]

  @@index([name], map: "addresstype_name_u")
}

model ContactType {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique @db.Uuid
  description   String?
  isActive      Boolean?        @default(true)
  createdAt     DateTime?       @default(now()) @db.Timestamp(6)
  createById    String?         @db.Uuid
  updateAt      DateTime?       @default(now()) @db.Timestamp(6)
  updateById    String?         @db.Uuid
  VendorContact VendorContact[]

  @@index([name], map: "contacttype_name_u")
}

model Currency {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String         @unique @db.VarChar(3)
  name         String         @db.VarChar(100)
  symbol       String?        @db.VarChar(5)
  description  String?        @default("")
  isActive     Boolean?       @default(true)
  rate         Float?         @default(1)
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  createById   String?        @db.Uuid
  updateAt     DateTime?      @default(now()) @db.Timestamp(6)
  updateById   String?        @db.Uuid
  ExchangeRate ExchangeRate[]

  @@index([code], map: "currency_code_u")
}

model DeliveryPoint {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @unique @db.VarChar
  isActive   Boolean?   @default(true)
  createdAt  DateTime?  @default(now()) @db.Timestamp(6)
  createById String?    @db.Uuid
  updateAt   DateTime?  @default(now()) @db.Timestamp(6)
  updateById String?    @db.Uuid
  Location   Location[]

  @@index([name], map: "deliverypoint_name_u")
}

model Department {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique @db.VarChar
  isActive   Boolean?  @default(true)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  createById String?   @db.Uuid
  updateAt   DateTime? @default(now()) @db.Timestamp(6)
  updateById String?   @db.Uuid

  @@index([name], map: "department_name_u")
}

model ExchangeRate {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateAt     DateTime? @default(now()) @db.Timestamp(6)
  currencyId String?   @db.Uuid
  rate       Float?    @default(1)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  createById String?   @db.Uuid
  updateAt   DateTime? @default(now()) @db.Timestamp(6)
  updateById String?   @db.Uuid
  Currency   Currency? @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dateAt, currencyId], map: "exchangerate_dateat_currencyid_u")
}

model Location {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique @db.VarChar
  locationType    EnumLocationType
  description     String?
  isActive        Boolean?         @default(true)
  deliveryPointId String?          @db.Uuid
  createdAt       DateTime?        @default(now()) @db.Timestamp(6)
  createById      String?          @db.Uuid
  updateAt        DateTime?        @default(now()) @db.Timestamp(6)
  updateById      String?          @db.Uuid
  DeliveryPoint   DeliveryPoint?   @relation(fields: [deliveryPointId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "location_name_u")
}

model Product {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String           @unique @db.VarChar
  name           String           @unique @db.VarChar
  description    String?
  primaryUnit    String           @db.Uuid
  isActive       Boolean?         @default(true)
  createdAt      DateTime?        @default(now()) @db.Timestamp(6)
  createById     String?          @db.Uuid
  updateAt       DateTime?        @default(now()) @db.Timestamp(6)
  updateById     String?          @db.Uuid
  Unit           Unit             @relation(fields: [primaryUnit], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProductInfo    ProductInfo?
  ProductVendor  ProductVendor[]
  UnitConversion UnitConversion[]

  @@index([code], map: "product_code_u")
  @@index([name], map: "product_name_u")
}

model ProductCategory {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @unique @db.VarChar
  description        String?
  isActive           Boolean?             @default(true)
  createdAt          DateTime?            @default(now()) @db.Timestamp(6)
  createById         String?              @db.Uuid
  updateAt           DateTime?            @default(now()) @db.Timestamp(6)
  updateById         String?              @db.Uuid
  ProductSubCategory ProductSubCategory[]

  @@index([name], map: "productcategory_name_u")
}

model ProductInfo {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId  String    @unique @db.Uuid
  price      Float?
  info       Json?     @db.Json
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  createById String?   @db.Uuid
  updateAt   DateTime? @default(now()) @db.Timestamp(6)
  updateById String?   @db.Uuid
  Product    Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([productId], map: "productinfo_productid_u")
}

model ProductItemGroup {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String              @unique @db.VarChar
  description          String?
  isActive             Boolean?            @default(true)
  productSubCategoryId String?             @db.Uuid
  createdAt            DateTime?           @default(now()) @db.Timestamp(6)
  createById           String?             @db.Uuid
  updateAt             DateTime?           @default(now()) @db.Timestamp(6)
  updateById           String?             @db.Uuid
  ProductSubCategory   ProductSubCategory? @relation(fields: [productSubCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "productitemgroup_name_u")
}

model ProductSubCategory {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String             @unique @db.VarChar
  description       String?
  isActive          Boolean?           @default(true)
  productCategoryId String?            @db.Uuid
  createdAt         DateTime?          @default(now()) @db.Timestamp(6)
  createById        String?            @db.Uuid
  updateAt          DateTime?          @default(now()) @db.Timestamp(6)
  updateById        String?            @db.Uuid
  ProductItemGroup  ProductItemGroup[]
  ProductCategory   ProductCategory?   @relation(fields: [productCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "productsubcategory_name_u")
}

model ProductVendor {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId    String?   @db.Uuid
  productId   String?   @db.Uuid
  description String?
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid
  Product     Product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Vendor      Vendor?   @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, productId], map: "productvendor_vendorid_productid_u")
}

model Unit {
  id                                             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                           String           @unique @db.VarChar
  description                                    String?
  isActive                                       Boolean?         @default(true)
  createdAt                                      DateTime?        @default(now()) @db.Timestamp(6)
  createById                                     String?          @db.Uuid
  updateAt                                       DateTime?        @default(now()) @db.Timestamp(6)
  updateById                                     String?          @db.Uuid
  Product                                        Product[]
  UnitConversion_UnitConversion_fromUnitIdToUnit UnitConversion[] @relation("UnitConversion_fromUnitIdToUnit")
  UnitConversion_UnitConversion_toUnitIdToUnit   UnitConversion[] @relation("UnitConversion_toUnitIdToUnit")

  @@index([name], map: "unit_name_u")
}

model UnitConversion {
  id                                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId                            String?      @db.Uuid
  unitType                             EnumUnitType
  fromUnitId                           String?      @db.Uuid
  toUnitId                             String?      @db.Uuid
  rate                                 Float?       @default(1)
  description                          String?
  isActive                             Boolean?     @default(true)
  createdAt                            DateTime?    @default(now()) @db.Timestamp(6)
  createById                           String?      @db.Uuid
  updateAt                             DateTime?    @default(now()) @db.Timestamp(6)
  updateById                           String?      @db.Uuid
  Unit_UnitConversion_fromUnitIdToUnit Unit?        @relation("UnitConversion_fromUnitIdToUnit", fields: [fromUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product                              Product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Unit_UnitConversion_toUnitIdToUnit   Unit?        @relation("UnitConversion_toUnitIdToUnit", fields: [toUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([productId, unitType], map: "unitconversion_productid_unittype_u")
}

model Vendor {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique @db.VarChar
  description   String?
  isActive      Boolean?        @default(true)
  createdAt     DateTime?       @default(now()) @db.Timestamp(6)
  createById    String?         @db.Uuid
  updateAt      DateTime?       @default(now()) @db.Timestamp(6)
  updateById    String?         @db.Uuid
  ProductVendor ProductVendor[]
  VendorAddress VendorAddress[]
  VendorContact VendorContact[]

  @@index([name], map: "vendor_name_u")
}

model VendorAddress {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId      String?     @db.Uuid
  addressTypeId String      @db.Uuid
  address       Json?       @db.Json
  isActive      Boolean?    @default(true)
  createdAt     DateTime?   @default(now()) @db.Timestamp(6)
  createById    String?     @db.Uuid
  updateAt      DateTime?   @default(now()) @db.Timestamp(6)
  updateById    String?     @db.Uuid
  AddressType   AddressType @relation(fields: [addressTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Vendor        Vendor?     @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, addressTypeId], map: "vendorcontact_vendorid_addresstypeid_u")
}

model VendorContact {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId      String?     @db.Uuid
  contactTypeId String      @db.Uuid
  description   String?
  isActive      Boolean?    @default(true)
  createdAt     DateTime?   @default(now()) @db.Timestamp(6)
  createById    String?     @db.Uuid
  updateAt      DateTime?   @default(now()) @db.Timestamp(6)
  updateById    String?     @db.Uuid
  ContactType   ContactType @relation(fields: [contactTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Vendor        Vendor?     @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([vendorId, contactTypeId], map: "vendorcontact_vendorid_contacttypeid_u")
}

model Menu {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar(5)
  description String?
  isActive    Boolean?  @default(true)
  isVisible   Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid

  @@index([name], map: "menu_name_u")
}

model GRN0 {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id String  @db.Uuid
  name   String? @db.VarChar
  Inv0   INV0    @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  GRN1   GRN1[]
}

model GRN1 {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  GRN0Id String  @db.Uuid
  name   String? @db.VarChar
  GRN0   GRN0    @relation(fields: [GRN0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PR0 {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refName      String    @unique @db.VarChar
  prDate       DateTime? @db.Date
  prTypeId     String?   @db.Uuid
  requestorId  String?   @db.Uuid
  departmentId String?   @db.Uuid
  isActive     Boolean?  @default(true)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  createById   String?   @db.Uuid
  updateAt     DateTime? @default(now()) @db.Timestamp(6)
  updateById   String?   @db.Uuid
  PRType       PRType?   @relation(fields: [prTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PR1          PR1[]

  @@index([refName], map: "PR0_refname_u")
}

model PR1 {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  PR0Id        String?       @db.Uuid
  locationId   String?       @db.Uuid
  productId    String?       @db.Uuid
  unitId       String?       @db.Uuid
  description  String?
  requestQty   Float?
  approveQty   Float?
  currencyId   String?       @db.Uuid
  currencyRate Float?
  price        Decimal?      @db.Decimal(15, 5)
  totalPrice   Decimal?      @db.Decimal(15, 5)
  createdAt    DateTime?     @default(now()) @db.Timestamp(6)
  createById   String?       @db.Uuid
  updateAt     DateTime?     @default(now()) @db.Timestamp(6)
  updateById   String?       @db.Uuid
  PR0          PR0?          @relation(fields: [PR0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PR1Workflow  PR1Workflow[]
}

model PR1Workflow {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  PR1Id      String?   @db.Uuid
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  createById String?   @db.Uuid
  PR1        PR1?      @relation(fields: [PR1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PRType {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar
  description String?
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid
  PR0         PR0[]

  @@index([name], map: "PRtype_name_u")
}

model SI0 {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id String  @db.Uuid
  name   String? @db.VarChar
  Inv0   INV0    @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SI1    SI1[]
}

model SI1 {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SI0Id String  @db.Uuid
  name  String? @db.VarChar
  SI0   SI0     @relation(fields: [SI0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SO0 {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id String  @db.Uuid
  name   String? @db.VarChar
  Inv0   INV0    @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SO1    SO1[]
}

model SO1 {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SO0Id String  @db.Uuid
  name  String? @db.VarChar
  SO0   SO0     @relation(fields: [SO0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SR0 {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id String  @db.Uuid
  name   String? @db.VarChar
  Inv0   INV0    @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SR1    SR1[]
}

model SR1 {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SR0Id String  @db.Uuid
  name  String? @db.VarChar
  SR0   SR0     @relation(fields: [SR0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PO0 {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar
  description String?
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid
  PO1         PO1[]

  @@index([name], map: "PO_name_u")
}

model PO1 {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?   @unique @db.VarChar
  description String?
  isActive    Boolean?  @default(true)
  PO0Id       String?   @db.Uuid
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createById  String?   @db.Uuid
  updateAt    DateTime? @default(now()) @db.Timestamp(6)
  updateById  String?   @db.Uuid
  PO0         PO0?      @relation(fields: [PO0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "PO1_name_u")
}

model INV0 {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String          @unique @db.VarChar
  invDocType EnumInvDocType?
  GRN0       GRN0[]
  INV1       INV1[]
  SI0        SI0[]
  SO0        SO0[]
  SR0        SR0[]
}

model INV1 {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv0Id         String   @db.Uuid
  fromLot        String?  @db.Uuid
  currentLotName String?  @db.VarChar
  qty            Decimal? @db.Decimal
  cost           Decimal? @db.Decimal(15, 5)
  INV0           INV0     @relation(fields: [inv0Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  INV2           INV2[]
}

model INV2 {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inv1Id   String   @db.Uuid
  lotName  String?  @db.VarChar
  lotIndex Int      @default(1)
  qty      Decimal? @db.Decimal
  cost     Decimal? @db.Decimal(15, 5)
  INV1     INV1     @relation(fields: [inv1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([lotName, lotIndex], map: "inv2_lotname_lotindex_u")
}

enum EnumInvDocType {
  GRN
  CN
  SR
  ISSUE
  ADJ
  SI
  SO
}

enum EnumLocationType {
  Inventory
  Direct
}

enum EnumPOStatus {
  Open
  Voided
  Closed
  Draft
  Sent
  Partial
  FullyReceived
  Cancelled
  Deleted
}

enum EnumPRDocStatus {
  Draft
  WIP
  Complete
}

enum EnumPRWorkflowStatus {
  Draft
  Pending
  Review
  Accept
}

enum EnumUnitType {
  OrderUnit
  InventoryUnit
  RecipeUnit
}
