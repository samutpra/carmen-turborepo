generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/@prisma-carmen-client-system"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "multiSchema", "postgresqlExtensions", "relationJoins"]
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD/system.md"
  title    = "Carmen Inventory System Database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SYSTEM")
}

model business_unit_module_table {
  id                                                              String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_unit_id                                                String              @db.Uuid
  module_id                                                       String              @db.Uuid
  created_at                                                      DateTime?           @default(now()) @db.Timestamp(6)
  created_by_id                                                   String?             @db.Uuid
  updated_at                                                      DateTime?           @default(now()) @db.Timestamp(6)
  updated_by_id                                                   String?             @db.Uuid
  business_unit_table                                             business_unit_table @relation(fields: [business_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_business_unit_module_table_created_by_idTouser_table user_table?         @relation("business_unit_module_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  module_table                                                    module_table        @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_business_unit_module_table_updated_by_idTouser_table user_table?         @relation("business_unit_module_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([business_unit_id, module_id], map: "businessunitmodule_business_unit_id_module_id_u")
}

model business_unit_table {
  id                                                       String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cluster_id                                               String                       @db.Uuid
  code                                                     String                       @db.VarChar(30)
  name                                                     String
  description                                              String?
  is_hq                                                    Boolean?                     @default(true)
  is_active                                                Boolean?                     @default(true)
  created_at                                               DateTime?                    @default(now()) @db.Timestamp(6)
  created_by_id                                            String?                      @db.Uuid
  updated_at                                               DateTime?                    @default(now()) @db.Timestamp(6)
  updated_by_id                                            String?                      @db.Uuid
  application_role_table                                   application_role_table[]
  business_unit_module_table                               business_unit_module_table[]
  cluster_table                                            cluster_table                @relation(fields: [cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_business_unit_table_created_by_idTouser_table user_table?                  @relation("business_unit_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_business_unit_table_updated_by_idTouser_table user_table?                  @relation("business_unit_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription_detail_table                                subscription_detail_table[]
  user_business_unit_table                                 user_business_unit_table[]

  @@unique([cluster_id, code], map: "businessunit_clusertid_code_u")
  @@index([code], map: "businessunit_code_idx")
  @@index([cluster_id], map: "tenant_clusertid_idx")
}

model cluster_table {
  id                                                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                                               String                @unique(map: "cluster_code_u") @db.VarChar(30)
  name                                               String                @unique(map: "cluster_name_u")
  is_active                                          Boolean?              @default(true)
  info                                               Json?                 @db.Json
  created_at                                         DateTime?             @default(now()) @db.Timestamp(6)
  created_by_id                                      String?               @db.Uuid
  updated_at                                         DateTime?             @default(now()) @db.Timestamp(6)
  updated_by_id                                      String?               @db.Uuid
  business_unit_table                                business_unit_table[]
  user_table_cluster_table_created_by_idTouser_table user_table?           @relation("cluster_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_cluster_table_updated_by_idTouser_table user_table?           @relation("cluster_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription_table                                 subscription_table[]
}

model module_table {
  id                                                String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                              String                       @unique @db.VarChar
  description                                       String?
  created_at                                        DateTime?                    @default(now()) @db.Timestamp(6)
  created_by_id                                     String?                      @db.Uuid
  updated_at                                        DateTime?                    @default(now()) @db.Timestamp(6)
  updated_by_id                                     String?                      @db.Uuid
  business_unit_module_table                        business_unit_module_table[]
  user_table_module_table_created_by_idTouser_table user_table?                  @relation("module_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_module_table_updated_by_idTouser_table user_table?                  @relation("module_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription_detail_table                         subscription_detail_table[]

  @@index([name], map: "module_name_id_u")
}

model notification_preference_table {
  id                                                                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                            String      @unique @db.Uuid
  is_email                                                           Boolean     @default(false)
  is_sms                                                             Boolean?    @default(false)
  is_in_app                                                          Boolean?    @default(true)
  created_at                                                         DateTime?   @default(now()) @db.Timestamp(6)
  created_by_id                                                      String?     @db.Uuid
  updated_at                                                         DateTime?   @default(now()) @db.Timestamp(6)
  updated_by_id                                                      String?     @db.Uuid
  user_table_notification_preference_table_created_by_idTouser_table user_table? @relation("notification_preference_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_notification_preference_table_updated_by_idTouser_table user_table? @relation("notification_preference_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_notification_preference_table_user_idTouser_table       user_table  @relation("notification_preference_table_user_idTouser_table", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "notificationpreference_user_id_u")
}

model notification_table {
  id                                                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                 String      @db.Uuid
  message                                                 String?
  is_read                                                 Boolean?    @default(false)
  is_sent                                                 Boolean?    @default(false)
  created_at                                              DateTime?   @default(now()) @db.Timestamp(6)
  created_by_id                                           String?     @db.Uuid
  updated_at                                              DateTime?   @default(now()) @db.Timestamp(6)
  updated_by_id                                           String?     @db.Uuid
  user_table_notification_table_created_by_idTouser_table user_table? @relation("notification_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_notification_table_updated_by_idTouser_table user_table? @relation("notification_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_notification_table_user_idTouser_table       user_table  @relation("notification_table_user_idTouser_table", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model password_table {
  id                                                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                             String      @db.Uuid
  hash                                                String
  is_active                                           Boolean?    @default(false)
  expiredOn                                           DateTime    @default(dbgenerated("(now() + '90 days'::interval)")) @db.Date
  created_at                                          DateTime?   @default(now()) @db.Timestamp(6)
  created_by_id                                       String?     @db.Uuid
  user_table_password_table_created_by_idTouser_table user_table? @relation("password_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table                                          user_table  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "password_user_id_idx")
}

model permission_table {
  id                                                    String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group                                                 String                              @db.VarChar
  name                                                  String                              @db.VarChar
  action                                                enum_permission_action
  description                                           String?
  created_at                                            DateTime?                           @default(now()) @db.Timestamp(6)
  created_by_id                                         String?                             @db.Uuid
  updated_at                                            DateTime?                           @default(now()) @db.Timestamp(6)
  updated_by_id                                         String?                             @db.Uuid
  application_role_permission_table                     application_role_permission_table[]
  user_table_permission_table_created_by_idTouser_table user_table?                         @relation("permission_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_permission_table_updated_by_idTouser_table user_table?                         @relation("permission_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([group, name, action], map: "permission_group_name_action_u")
}

model subscription_detail_table {
  id                                                             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription_id                                                String              @db.Uuid
  business_unit_id                                               String              @db.Uuid
  module_id                                                      String              @db.Uuid
  created_at                                                     DateTime?           @default(now()) @db.Timestamp(6)
  created_by_id                                                  String?             @db.Uuid
  updated_at                                                     DateTime?           @default(now()) @db.Timestamp(6)
  updated_by_id                                                  String?             @db.Uuid
  business_unit_table                                            business_unit_table @relation(fields: [business_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_subscription_detail_table_created_by_idTouser_table user_table?         @relation("subscription_detail_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  module_table                                                   module_table        @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription_table                                             subscription_table  @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_subscription_detail_table_updated_by_idTouser_table user_table?         @relation("subscription_detail_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([subscription_id, business_unit_id, module_id], map: "subscriptiondetail_subscription_id_business_unit_id_module_id_u")
}

model subscription_table {
  id                                                      String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cluster_id                                              String                      @db.Uuid
  subscription_number                                     String                      @db.VarChar
  start_date                                              DateTime                    @db.Date
  end_date                                                DateTime                    @db.Date
  status                                                  enum_subscription_status
  created_at                                              DateTime?                   @default(now()) @db.Timestamp(6)
  created_by_id                                           String?                     @db.Uuid
  updated_at                                              DateTime?                   @default(now()) @db.Timestamp(6)
  updated_by_id                                           String?                     @db.Uuid
  subscription_detail_table                               subscription_detail_table[]
  cluster_table                                           cluster_table               @relation(fields: [cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_subscription_table_created_by_idTouser_table user_table?                 @relation("subscription_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_subscription_table_updated_by_idTouser_table user_table?                 @relation("subscription_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([cluster_id, subscription_number], map: "subscription_cluster_id_subscription_number_u")
}

model user_business_unit_table {
  id                                                            String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                       String?              @db.Uuid
  business_unit_id                                              String?              @db.Uuid
  is_active                                                     Boolean?             @default(true)
  created_at                                                    DateTime?            @default(now()) @db.Timestamp(6)
  created_by_id                                                 String?              @db.Uuid
  updated_at                                                    DateTime?            @default(now()) @db.Timestamp(6)
  updated_by_id                                                 String?              @db.Uuid
  business_unit_table                                           business_unit_table? @relation(fields: [business_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_business_unit_table_created_by_idTouser_table user_table?          @relation("user_business_unit_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_business_unit_table_updated_by_idTouser_table user_table?          @relation("user_business_unit_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table                                                    user_table?          @relation("user_business_unit_table_user_idTouser_table", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, business_unit_id], map: "usertenant_user_id_business_unit_id_u")
}

model user_profile_table {
  id                                                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                 String?     @db.Uuid
  firstname                                               String      @default("") @db.VarChar(100)
  middlename                                              String?     @default("") @db.VarChar(100)
  lastname                                                String?     @default("") @db.VarChar(100)
  bio                                                     Json?       @default("{}") @db.Json
  created_at                                              DateTime?   @default(now()) @db.Timestamp(6)
  created_by_id                                           String?     @db.Uuid
  updated_at                                              DateTime?   @default(now()) @db.Timestamp(6)
  updated_by_id                                           String?     @db.Uuid
  user_table_user_profile_table_created_by_idTouser_table user_table? @relation("user_profile_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_profile_table_updated_by_idTouser_table user_table? @relation("user_profile_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_profile_table_user_idTouser_table       user_table? @relation("user_profile_table_user_idTouser_table", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([firstname, lastname], map: "userprofile_firstname_lastname_idx")
  @@index([user_id], map: "userprofile_user_id_idx")
}

model user_table {
  id                                                                                            String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                                                                                      String                              @unique @db.VarChar(30)
  email                                                                                         String                              @db.VarChar(255)
  is_active                                                                                     Boolean?                            @default(false)
  is_consent                                                                                    Boolean?                            @default(false)
  consent                                                                                       DateTime?                           @db.Timestamp(6)
  created_at                                                                                    DateTime?                           @default(now()) @db.Timestamp(6)
  created_by_id                                                                                 String?                             @db.Uuid
  updated_at                                                                                    DateTime?                           @default(now()) @db.Timestamp(6)
  updated_by_id                                                                                 String?                             @db.Uuid
  application_role_permission_table_application_role_permission_table_created_by_idTouser_table application_role_permission_table[] @relation("application_role_permission_table_created_by_idTouser_table")
  application_role_permission_table_application_role_permission_table_updated_by_idTouser_table application_role_permission_table[] @relation("application_role_permission_table_updated_by_idTouser_table")
  application_role_table_application_role_table_created_by_idTouser_table                       application_role_table[]            @relation("application_role_table_created_by_idTouser_table")
  application_role_table_application_role_table_updated_by_idTouser_table                       application_role_table[]            @relation("application_role_table_updated_by_idTouser_table")
  business_unit_module_table_business_unit_module_table_created_by_idTouser_table               business_unit_module_table[]        @relation("business_unit_module_table_created_by_idTouser_table")
  business_unit_module_table_business_unit_module_table_updated_by_idTouser_table               business_unit_module_table[]        @relation("business_unit_module_table_updated_by_idTouser_table")
  business_unit_table_business_unit_table_created_by_idTouser_table                             business_unit_table[]               @relation("business_unit_table_created_by_idTouser_table")
  business_unit_table_business_unit_table_updated_by_idTouser_table                             business_unit_table[]               @relation("business_unit_table_updated_by_idTouser_table")
  cluster_table_cluster_table_created_by_idTouser_table                                         cluster_table[]                     @relation("cluster_table_created_by_idTouser_table")
  cluster_table_cluster_table_updated_by_idTouser_table                                         cluster_table[]                     @relation("cluster_table_updated_by_idTouser_table")
  module_table_module_table_created_by_idTouser_table                                           module_table[]                      @relation("module_table_created_by_idTouser_table")
  module_table_module_table_updated_by_idTouser_table                                           module_table[]                      @relation("module_table_updated_by_idTouser_table")
  notification_preference_table_notification_preference_table_created_by_idTouser_table         notification_preference_table[]     @relation("notification_preference_table_created_by_idTouser_table")
  notification_preference_table_notification_preference_table_updated_by_idTouser_table         notification_preference_table[]     @relation("notification_preference_table_updated_by_idTouser_table")
  notification_preference_table_notification_preference_table_user_idTouser_table               notification_preference_table?      @relation("notification_preference_table_user_idTouser_table")
  notification_table_notification_table_created_by_idTouser_table                               notification_table[]                @relation("notification_table_created_by_idTouser_table")
  notification_table_notification_table_updated_by_idTouser_table                               notification_table[]                @relation("notification_table_updated_by_idTouser_table")
  notification_table_notification_table_user_idTouser_table                                     notification_table[]                @relation("notification_table_user_idTouser_table")
  password_table_password_table_created_by_idTouser_table                                       password_table[]                    @relation("password_table_created_by_idTouser_table")
  password_table                                                                                password_table[]
  permission_table_permission_table_created_by_idTouser_table                                   permission_table[]                  @relation("permission_table_created_by_idTouser_table")
  permission_table_permission_table_updated_by_idTouser_table                                   permission_table[]                  @relation("permission_table_updated_by_idTouser_table")
  subscription_detail_table_subscription_detail_table_created_by_idTouser_table                 subscription_detail_table[]         @relation("subscription_detail_table_created_by_idTouser_table")
  subscription_detail_table_subscription_detail_table_updated_by_idTouser_table                 subscription_detail_table[]         @relation("subscription_detail_table_updated_by_idTouser_table")
  subscription_table_subscription_table_created_by_idTouser_table                               subscription_table[]                @relation("subscription_table_created_by_idTouser_table")
  subscription_table_subscription_table_updated_by_idTouser_table                               subscription_table[]                @relation("subscription_table_updated_by_idTouser_table")
  user_application_role_table_user_application_role_table_created_by_idTouser_table             user_application_role_table[]       @relation("user_application_role_table_created_by_idTouser_table")
  user_application_role_table_user_application_role_table_updated_by_idTouser_table             user_application_role_table[]       @relation("user_application_role_table_updated_by_idTouser_table")
  user_application_role_table_user_application_role_table_user_idTouser_table                   user_application_role_table[]       @relation("user_application_role_table_user_idTouser_table")
  user_business_unit_table_user_business_unit_table_created_by_idTouser_table                   user_business_unit_table[]          @relation("user_business_unit_table_created_by_idTouser_table")
  user_business_unit_table_user_business_unit_table_updated_by_idTouser_table                   user_business_unit_table[]          @relation("user_business_unit_table_updated_by_idTouser_table")
  user_business_unit_table_user_business_unit_table_user_idTouser_table                         user_business_unit_table[]          @relation("user_business_unit_table_user_idTouser_table")
  user_profile_table_user_profile_table_created_by_idTouser_table                               user_profile_table[]                @relation("user_profile_table_created_by_idTouser_table")
  user_profile_table_user_profile_table_updated_by_idTouser_table                               user_profile_table[]                @relation("user_profile_table_updated_by_idTouser_table")
  user_profile_table_user_profile_table_user_idTouser_table                                     user_profile_table[]                @relation("user_profile_table_user_idTouser_table")
  user_table_user_table_created_by_idTouser_table                                               user_table?                         @relation("user_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user_table_user_table_created_by_idTouser_table                                         user_table[]                        @relation("user_table_created_by_idTouser_table")
  user_table_user_table_updated_by_idTouser_table                                               user_table?                         @relation("user_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user_table_user_table_updated_by_idTouser_table                                         user_table[]                        @relation("user_table_updated_by_idTouser_table")

  @@index([email], map: "user_email_idx")
  @@index([username], map: "user_username_idx")
}

model application_role_permission_table {
  id                                                                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_role_id                                                    String                 @db.Uuid
  permission_id                                                          String                 @db.Uuid
  created_at                                                             DateTime?              @default(now()) @db.Timestamp(6)
  created_by_id                                                          String?                @db.Uuid
  updated_at                                                             DateTime?              @default(now()) @db.Timestamp(6)
  updated_by_id                                                          String?                @db.Uuid
  application_role_table                                                 application_role_table @relation(fields: [application_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_application_role_permission_table_created_by_idTouser_table user_table?            @relation("application_role_permission_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permission_table                                                       permission_table       @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_application_role_permission_table_updated_by_idTouser_table user_table?            @relation("application_role_permission_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([application_role_id, permission_id], map: "applicationrolepermission_application_role_id_permission_id_u")
}

model application_role_table {
  id                                                          String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_unit_id                                            String                              @db.Uuid
  name                                                        String                              @unique @db.VarChar
  description                                                 String?
  created_at                                                  DateTime?                           @default(now()) @db.Timestamp(6)
  created_by_id                                               String?                             @db.Uuid
  updated_at                                                  DateTime?                           @default(now()) @db.Timestamp(6)
  updated_by_id                                               String?                             @db.Uuid
  application_role_permission_table                           application_role_permission_table[]
  business_unit_table                                         business_unit_table                 @relation(fields: [business_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_application_role_table_created_by_idTouser_table user_table?                         @relation("application_role_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_application_role_table_updated_by_idTouser_table user_table?                         @relation("application_role_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_application_role_table                                 user_application_role_table[]

  @@unique([business_unit_id, name], map: "application_role_business_unit_id_name_u")
  @@index([name], map: "application_role_name_idx")
}

model user_application_role_table {
  id                                                               String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                          String                 @db.Uuid
  application_role_id                                              String                 @db.Uuid
  created_at                                                       DateTime?              @default(now()) @db.Timestamp(6)
  created_by_id                                                    String?                @db.Uuid
  updated_at                                                       DateTime?              @default(now()) @db.Timestamp(6)
  updated_by_id                                                    String?                @db.Uuid
  application_role_table                                           application_role_table @relation(fields: [application_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_application_role_table_created_by_idTouser_table user_table?            @relation("user_application_role_table_created_by_idTouser_table", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_application_role_table_updated_by_idTouser_table user_table?            @relation("user_application_role_table_updated_by_idTouser_table", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_table_user_application_role_table_user_idTouser_table       user_table             @relation("user_application_role_table_user_idTouser_table", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, application_role_id], map: "userapplicationrole_user_id_application_role_id_u")
}

enum enum_subscription_status {
  active
  inactive
  expired
}

enum enum_permission_action {
  view
  view_all
  create
  update
  delete
  own_delete
  print
  export
}
