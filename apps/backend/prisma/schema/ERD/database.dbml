// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project Carmen_Inventory {
  database_type: 'PostgreSQL'
  Note: 'Carmen Inventory Project 2024'
}

TABLE CARMEN_SYSTEM.user_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  username varchar(30) [unique, not null]
  email varchar(255) [not null]
  
  is_active bool [default: false]
  is_consent bool [default: false]
  consent timestamp [null]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    username [name: "user_username_idx"]
    email [name: "user_email_idx"]
  }
}

TABLE CARMEN_SYSTEM.password_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id uuid [not null, ref: > CARMEN_SYSTEM.user_table.id]
  hash text [not null]

  is_active bool [default: false]

  //expiredOn date [not null, default: `now() + '1 day'::interval`]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]

  indexes {
    user_id [name: 'password_user_id_idx']
  }
}

TABLE CARMEN_SYSTEM.user_profile_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id uuid [ref: - CARMEN_SYSTEM.user_table.id]
  firstname varchar(100)
  middlename varchar(100)
  lastname varchar(100)

  bio json [null]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    user_id [name: "userprofile_user_id_idx"]
   (firstname, lastname) [name: "userprofile_firstname_lastname_idx"]
  }
}


TABLE CARMEN_SYSTEM.module_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name        varchar   [not null, unique]
  description text

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    name [name: "module_name_idx"]
  }
}

TABLE CARMEN_SYSTEM.business_unit_module_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  business_unit_id uuid [not null, ref: > CARMEN_SYSTEM.business_unit_table.id]
  module_id uuid [not null, ref: > CARMEN_SYSTEM.module_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    (business_unit_id, module_id) [name: "businessunitmodule_business_unit_id_module_id_u"]
  }
}

Enum CARMEN_SYSTEM.enum_subscription_status {
  active
  inactive
  expired
}

TABLE CARMEN_SYSTEM.subscription_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  cluster_id uuid [not null, ref: > CARMEN_SYSTEM.cluster_table.id]

  start_date date [not null]
  end_date date [not null]

  status CARMEN_SYSTEM.enum_subscription_status [not null]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {

  }
}

TABLE CARMEN_SYSTEM.subscription_detail_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]

  subscription_id uuid [not null, ref: > CARMEN_SYSTEM.subscription_table.id]
  business_unit_id uuid [not null, ref: > CARMEN_SYSTEM.business_unit_table.id]
  module_id uuid [not null, ref: > CARMEN_SYSTEM.module_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    (subscription_id, business_unit_id, module_id) [unique, name: "subscriptiondetail_subscription_id_business_unit_id_module_id_u"]
  }
}

TABLE CARMEN_SYSTEM.cluster_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  code varchar(30) [not null, unique]
  name text [not null, unique]
  is_active bool [default: true]

  info json [null]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    code [unique, name: "cluster_code_u"]
    name [unique, name: "cluster_name_u"]
  }
}

TABLE CARMEN_SYSTEM.business_unit_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  cluster_id uuid [not null, ref: > CARMEN_SYSTEM.cluster_table.id]
  code varchar(30) [not null]
  name text [not null]

  is_hq bool [default: true]
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    cluster_id [name: "tenant_clusertid_idx"]
    code [name: "businessunit_code_idx"]
    (cluster_id, code) [unique, name: "businessunit_clusertid_code_u"]
  }
}

TABLE CARMEN_SYSTEM.user_business_unit_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id uuid [ref: > CARMEN_SYSTEM.user_table.id]
  business_unit_id uuid [ref: > CARMEN_SYSTEM.business_unit_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    (user_id, business_unit_id) [unique, name: "usertenant_user_id_business_unit_id_u"]
  }
}

TABLE CARMEN_SYSTEM.notification_preference_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id uuid [not null, unique, ref: > CARMEN_SYSTEM.user_table.id]

  is_email bool [not null, default: false]
  is_sms bool [default: false]
  is_in_app bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    user_id [name: "notificationpreference_user_id_u"]
  }
}

TABLE CARMEN_SYSTEM.notification_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id uuid [not null, ref: > CARMEN_SYSTEM.user_table.id]
  message text
  is_read bool [default: false]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
  }
}

TABLE CARMEN_SYSTEM.role_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  business_unit_id uuid [not null, ref: > CARMEN_SYSTEM.business_unit_table.id]
  name        varchar   [not null, unique]
  description text

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    name [name: "role_name_idx"]
    (business_unit_id, name) [unique, name: "role_business_unit_id_name_u"]
  }
}

ENUM CARMEN_SYSTEM.enum_permission_action{
  read
  read_all
  create
  update
  delete
  own_delete
  print
  export
}

TABLE CARMEN_SYSTEM.permission_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  group varchar [not null]
  name varchar   [ not null]
  action CARMEN_SYSTEM.enum_permission_action [not null]
  description text

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  indexes {
    (group,name,action) [unique, name: "permission_group_name_action_u"]
  }
}

TABLE CARMEN_SYSTEM.user_role_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  user_id   uuid [not null, ref: > CARMEN_SYSTEM.user_table.id]
  role_id   uuid [not null, ref: > CARMEN_SYSTEM.role_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  Indexes {
    (user_id, role_id) [unique, name: "userrole_user_id_role_id_u"]
  }
}

TABLE CARMEN_SYSTEM.role_permission_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  role_id       uuid [not null, ref: > CARMEN_SYSTEM.role_table.id]
  permission_id uuid [not null, ref: > CARMEN_SYSTEM.permission_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid [ref: > CARMEN_SYSTEM.user_table.id]

  Indexes {
    (role_id, permission_id) [unique, name: "rolepermission_role_id_permission_id_u"]
  }
}

enum TENANT_DUMMY.enum_activity_action {
  read
  create
  update
  delete
  login
  other
}

TABLE TENANT_DUMMY.global_activity_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  action TENANT_DUMMY.enum_activity_action
  entity_type varchar(100)
  entity_id uuid
  actor_id uuid
  meta_data json [null]
  old_data json [null]
  new_data json [null]
  ip_address text [null]
  user_agent text [null]
  description text

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid

  indexes {
    (entity_type, entity_id) [name: 'global_activity_entitytype_entityid_idx']
    actor_id
    action
    created_at
  }

  // id          Int       @id @default(autoincrement())
  // action      String    // create, update, delete, login, etc.
  // entityType  String    // user, post, comment, etc.
  // entityId    String    // ID of the affected record
  // actorId     String?   // ID of user who performed the action
  // metadata    Json?     // Store additional details as JSON
  // oldData     Json?     // Previous state (for updates)
  // newData     Json?     // New state (for creates/updates)
  // ipAddress   String?   // IP address of the request
  // userAgent   String?   // Browser/client information
  // created_at   DateTime  @default(now())

  // // Relations (optional)
  // actor       User?     @relation(fields: [actorId], references: [id])
  
  // // Indexes for better query performance
  // @@index([entityType, entityId])
  // @@index([actorId])
  // @@index([action])
  // @@index([created_at])

}

TABLE TENANT_DUMMY.menu_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar(5) [unique, not null]
  description text
  is_active bool [default: true]
  isVisible bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "menu_name_u"]
  }
}

TABLE TENANT_DUMMY.currency_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  code varchar(3) [unique, not null]
  name varchar(100) [not null]
  symbol varchar(5)
  description text [default: ""]
  is_active bool [default: true]
  rate float [default: 1]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    code [name: "currency_code_u"]
  }
}

TABLE TENANT_DUMMY.exchange_rate_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]

  at_date timestamp [default: `now()`]
  currency_id uuid [ref: > TENANT_DUMMY.currency_table.id]
  rate float [default: 1]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    (at_date, currency_id) [unique, name: "exchangerate_at_date_currency_id_u"]
  }
}

enum TENANT_DUMMY.enum_location_type {
  inventory
  direct
  consignment
}

TABLE TENANT_DUMMY.location_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]

  location_type TENANT_DUMMY.enum_location_type [not null]

  description text
  is_active bool [default: true]

  delivery_point_id uuid [ref: > TENANT_DUMMY.delivery_point_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "location_name_u"]
  }
}

TABLE TENANT_DUMMY.delivery_point_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "deliverypoint_name_u"]
  }
}

TABLE TENANT_DUMMY.unit_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "unit_name_u"]
  }
}

Enum TENANT_DUMMY.enum_unit_type {
  order_unit
  inventory_unit
  recipe_unit
}

TABLE TENANT_DUMMY.unit_conversion_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  product_id uuid [ref: > TENANT_DUMMY.product_table.id]
  unit_type TENANT_DUMMY.enum_unit_type [not null]
  from_unit_id uuid [ref: > TENANT_DUMMY.unit_table.id]
  to_unit_id uuid [ref: > TENANT_DUMMY.unit_table.id]
  rate float [default: 1]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    (product_id, unit_type) [name: "unitconversion_product_id_unit_type_u"]
  }
}

TABLE TENANT_DUMMY.department_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "department_name_u"]
  }
}

TABLE TENANT_DUMMY.product_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  code varchar [unique, not null]
  name varchar [unique, not null]
  description text

  primary_unit uuid [not null, ref: > TENANT_DUMMY.unit_table.id]

  is_active bool [default: true]
  
  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    code [name: "product_code_u"]
    name [name: "product_name_u"]
  }
}

TABLE TENANT_DUMMY.product_info_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  product_id uuid [unique, not null, ref: - TENANT_DUMMY.product_table.id]
  price Float

  info json [null]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    product_id [name: "productinfo_product_id_u"]
  }
}

TABLE TENANT_DUMMY.product_category_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "productcategory_name_u"]
  }
}

TABLE TENANT_DUMMY.product_sub_category_table {
 
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]
  product_category_id uuid [ref: > TENANT_DUMMY.product_category_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "productsubcategory_name_u"]
  }
}

TABLE TENANT_DUMMY.product_item_group_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]
  product_subcategory_id uuid [ref: > TENANT_DUMMY.product_sub_category_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "productitemgroup_name_u"]
  }
}

TABLE TENANT_DUMMY.purchase_request_type_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "PRtype_name_u"]
  }
}

TABLE TENANT_DUMMY.purchase_request_0_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  reference_name varchar [unique, not null]
  purchase_request_date date
  purchase_request_type_id uuid [ref: > TENANT_DUMMY.purchase_request_type_table.id]

  requestor_id uuid
  department_id uuid

  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    reference_name [name: "PR0_reference_name_u"]
  }
}

TABLE TENANT_DUMMY.purchase_request_1_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  
  purchase_request_0_id uuid [ref: > TENANT_DUMMY.purchase_request_0_table.id]
  
  location_id uuid
  product_id uuid
  unit_id uuid

  description text

  requested_qty float
  approved_qty float

  currency_id uuid
  currency_rate float

  price numeric(15,5)
  total_price numeric(15,5)

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

   indexes {
  }
}

TABLE TENANT_DUMMY.purchase_request_1_workflow_table {

   id uuid [not null, pk, default: `gen_random_uuid()`]
  purchase_request_1_id uuid [ref: > TENANT_DUMMY.purchase_request_1_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 
  
}

TABLE TENANT_DUMMY.purchase_order_0_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid
  
  indexes {
    name [name: "PO_name_u"]
  }
}

TABLE TENANT_DUMMY.purchase_order_1_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique]
  description text
  is_active bool [default: true]

  purchase_order_0_id uuid [ref: > TENANT_DUMMY.purchase_order_0_table.id]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "PO1_name_u"]
  }
}


TABLE TENANT_DUMMY.vendor_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "vendor_name_u"]
  }
}


TABLE TENANT_DUMMY.contact_type_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name uuid [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "contacttype_name_u"]
  }
}

TABLE TENANT_DUMMY.vendor_contact_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  vendor_id uuid [ref: > TENANT_DUMMY.vendor_table.id]
  contact_type_id uuid [not null, ref: > TENANT_DUMMY.contact_type_table.id]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    (vendor_id, contact_type_id) [unique, name: "vendorcontact_vendor_id_contact_type_id_u"]
  }
}


TABLE TENANT_DUMMY.address_type_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name uuid [unique, not null]
  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    name [name: "addresstype_name_u"]
  }
}

TABLE TENANT_DUMMY.vendor_address_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  vendor_id uuid [ref: > TENANT_DUMMY.vendor_table.id]
  address_type_id uuid [not null, ref: > TENANT_DUMMY.address_type_table.id]
  address json [null]
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    (vendor_id, address_type_id) [unique, name: "vendorcontact_vendor_id_address_type_id_u"]
  }
}

TABLE TENANT_DUMMY.product_vendor_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]

  vendor_id uuid [ref: > TENANT_DUMMY.vendor_table.id]
  product_id uuid [ref: > TENANT_DUMMY.product_table.id]

  description text
  is_active bool [default: true]

  created_at timestamp [default: `CURRENT_TIMESTAMP` ]
  created_by_id uuid 

  updated_at timestamp [null, default: `CURRENT_TIMESTAMP`]
  updated_by_id uuid

  indexes {
    (vendor_id, product_id) [unique, name: "productvendor_vendor_id_product_id_u"]
  }
}

enum TENANT_DUMMY.enum_purchase_request_doc_status {
  draft
  work_in_process
  complete
}

enum TENANT_DUMMY.enum_purchase_request_workflow_status {
  draft
  pending
  review
  accept
}

enum TENANT_DUMMY.enum_purchase_order_status {
  open 
  voided 
  closed 
  draft 
  sent
  partial
  fully_received 
  cancelled 
  deleted 
}

enum TENANT_DUMMY.enum_inventory_doc_type {
  good_receive_note
  credit_note
  store_requisition
  issue
  adjust
  stock_in
  stock_out
}

TABLE TENANT_DUMMY.inventory_transaction_0_table {
  id uuid [not null, pk, default: `gen_random_uuid()`]
  name varchar [unique, not null]
  inventory_doc_type TENANT_DUMMY.enum_inventory_doc_type
}

TABLE TENANT_DUMMY.inventory_transaction_1_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_0_id uuid [not null, ref: > TENANT_DUMMY.inventory_transaction_0_table.id]

  from_lot_name uuid
  current_lot_name varchar

  qty decimal
  cost numeric(15,5)

}

TABLE TENANT_DUMMY.inventory_transaction_2_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_1_id uuid [ not null, ref: > TENANT_DUMMY.inventory_transaction_1_table.id]
  
  lot_name varchar
  lot_index integer [not null, default: 1]

  qty decimal
  cost numeric(15,5)

  indexes {
    (lot_name, lot_index) [unique, name: "inv2_lotname_lot_index_u"]
  }
}

TABLE TENANT_DUMMY.good_receive_note_0_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_0_id uuid [not null, ref: - TENANT_DUMMY.inventory_transaction_0_table.id]
  
  name varchar

}

TABLE TENANT_DUMMY.good_receive_note_1_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  good_receive_note_0_id uuid [not null, ref: > TENANT_DUMMY.good_receive_note_0_table.id]
  
  name varchar

}

TABLE TENANT_DUMMY.store_requisition_0_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_0_id uuid [not null, ref: - TENANT_DUMMY.inventory_transaction_0_table.id]
  
  name varchar

}

TABLE TENANT_DUMMY.store_requisition_1_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  store_requisition_0_id uuid [not null, ref: > TENANT_DUMMY.store_requisition_0_table.id]
  
  name varchar

}


TABLE TENANT_DUMMY.stock_in_0_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_0_id uuid [not null, ref: - TENANT_DUMMY.inventory_transaction_0_table.id]
  
  name varchar

}

TABLE TENANT_DUMMY.stock_in_1_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  stock_in_0_id uuid [not null, ref: > TENANT_DUMMY.stock_in_0_table.id]
  
  name varchar

}


TABLE TENANT_DUMMY.stock_out_0_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  inventory_transaction_0_id uuid [not null, ref: - TENANT_DUMMY.inventory_transaction_0_table.id]
  
  name varchar

}

TABLE TENANT_DUMMY.stock_out_1_table {

  id uuid [not null, pk, default: `gen_random_uuid()`]
  stock_in_0_id uuid [not null, ref: > TENANT_DUMMY.stock_out_0_table.id]
  
  name varchar

}
